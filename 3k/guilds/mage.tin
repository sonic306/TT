#class {mage} {open}

#var guild mage

#var magebar[powers][immersing] 0

#NOP   HP: 2529/1261 SP: 7877/11675/94%/60% Sat: 79 Cnc: 0 G/MI: 3/1/21% ER: 0/81% G2N: 39%;
#NOP As I learned more about TT++ I realized I could have put the normal regular expression in double curly brackets instead of curling each capture. Not refactoring.;
#act {{^HP: (\d+)/(\d+) SP: (\d+)/(\d+)/(\d+)%/(\d+)% Sat: (\d+) Cnc: (\d+) G/MI: (\d+)/(\d+)/(\d+)% ER: (\d+)/(\d+)% G2N: (\d+)%}} {
	#var {sptracker[spPrevious]}	{$sptracker[spCurrent]}; 
	#var {magebar[hp][current]}	{%2};
	#var {magebar[hp][max]}		{%3};
	#var {magebar[sp][current]}	{%4};
	#var {magebar[sp][max]}		{%5};
	#var {magebar[mc]}		    {%6};
	#var {magebar[gem]}		    {%7};
	#var {magebar[sat]}		    {%8};
	#var {magebar[conc]}		{%9};
	#var {magebar[gol]}		    {%10};
	#var {magebar[imm]}		    {%11};
	#var {magebar[magreset]}	{%12};
	#var {magebar[er]}		    {%13};
	#var {magebar[screset]}		{%14};
	#var {magebar[g2n]}		    {%15};
	#var {sptracker[spCurrent]}	{$magebar[sp][current]};
	
	#IF {$sptracker[on]} {
		calculateBaseSpRegen;
	};

	#NOP About to reset. Don't let mystic immersion go to waste homie;
	#if {${magebar[magreset]} > 80 && ${magebar[imm]} > 0 && $magebar[powers][immersing] == 0} {
		#SEND !cast mystic immersion;
		#var magebar[powers][immersing] 1;
	};

	#NOP If sat is this high, then you're out of corpses. Secure shelter like a lil bitch;
	#if {${magebar[sat]} > 93} {
		#SEND !cast secure shelter;
	};

	#NOP Engage mystic immersion;
	#if {${magebar[sp][current]} < 200 && ${magebar[imm]} > 0 && $magebar[powers][immersing] == 0} {
		#SHOWME !cast mystic immersion;
		#SEND !cast mystic immersion;
		#var magebar[powers][immersing] 1;
	};
	
	#NOP About to reset. Don't let explosive releases go to waste meow;
	#if {${magebar[sat]} > 85 && ${magebar[er]} > 0} {
		#SHOWME !cast explosive release;
		#SEND !cast explosive release;
	};
	
	#NOP Mystic immersions depleted if sp drops this low. Leverage eternal heal to minimize downtime;
	#NOP hasHeal is set in eternal.tin;
	#if {${magebar[sp][current]} < 200 && !${resting} && ${hasHeal}} {
		#SHOWME !(heal mikefury;
		#SEND !(heal mikefury;
	};

	#NOP Immersions gone. (heal gone. Dire situation);
	#if {${magebar[sp][current]} < 200  && ${magebar[sat]} < 85} {
		#SHOWME !hmheal, !cast spell tap;
		#SEND !hmheal;
		#SEND !cast spell tap;
	};

	#if {$magebar[gem] < 80 } {
		ffetch gem;
	};

	#if {$magebar[imm] == 0 && $magebar[sat] < 75 && $magebar[sp][current] < 3000 && $magebar[cof][currnet] > 0} {
		cast spell tap;
	};

	#if {$magebar[sat] > 50 && $magebar[cof][current] > 0} {
		unwrap;
		cast corpse blast;
	};
	#line gag;
};

#NOP  PROT: [ A MS SS M PS MG PE MB <P> ST] COF:30/30 *!!! Mon(Rip):eme;
#act {{^ PROT:.*COF:(\d+)\/(\d+)}} {
	#var {magebar[cof][current]}	{%2};
	#var {magebar[cof][max]}	    {%3};
	#line gag;
};

#alias rest {
	#VAR {resting} {1};
	#SEND !hp;
	#if {$magebar[sp][current] < $magebar[sp][max] || $magebar[sat] > 50} {
		#SHOWME Recovering...;
		#DELAY {2} {
			rest;
		};
	}
	{
		#VAR {resting} {0};
		#showme Resuming from deep rest...;
		#if {!$singlestep} {
			..;
		};
	};
};

#act {Your major globe has ended.} {
	#send !cast major globe;
	#var magebar[powers][majorglobe] 0;
}

#act {You cast protection from evil on yourself} {
	#var magebar[powers][pe] 1;
}

#act {You feel safer as the major globe surrounds and protects you.} {
	#var magebar[powers][majorglobe] 1;
}

#act {You begin to phase in and out of the Ethereal plane!} {
	#var magebar[powers][blink] 1;
}

#act {Your skin begins to shimmer and flash} {
	#var magebar[powers][prisaura] 1;
}

#act {Your form has solidified.} {
	#var magebar[powers][blink] 0;
	cast blink;
}

#act {Your immersion has expired.} {
	#var magebar[powers][immersing] 0;
}

#act {Your protection from evil has ended.} {
	#var magebar[powers][pe] 0;
	cast protection from evil;
}

#act {The magic of your Major Globe shatters from the force of the attack!} {
	#var magebar[powers][majorglobe] 0;
	cast major globe;
}

#act {Your skin ceases its colorful displays} {
	#var magebar[powers][prisaura] 0;
	cast prismatic aura;
}

#act {Your deeppocket begins to fade} {
	cast deeppockets;
}

#act {You may not cast another defensive spell so quickly!} {
	#if {$magebar[powers][majorglobe] == 0} {#delay {2} {#send !cast major globe;}};
	#if {$magebar[powers][pe] == 0} {#delay {4} {#send !cast protection from evil;}};
	#if {$magebar[powers][blink] == 0} {#delay {6} {#send !cast blink;}};
	#if {$magebar[powers][prisaura] == 0} {#delay {8} {#send !cast prismatic aura;}};
	#line gag;
}


#act {Mikefury dealt the killing blow} {
    corpsetrig;
} {1}

#act {All your corpses are already bigger than what is here} {
	cast corpse blast;
}

#alias corpsetrig {
	#var idle 0;
	#if {$magebar[mc] < 90} {study spellbook};
    #if {$magebar[cof][current] == $magebar[cof][max]} {#SEND !cast spell tap on corpse;#SEND !cast corpse blast;} {#SEND !cast spell tap on corpse;#SEND !wrap all;};
    #SEND !get gold;
	.stop;
	rest; 
}

#alias tel {
    cast telekinesis as %1 from box;
};

#alias bc {
    cast box check;
};


#alias setcont {
		#SEND !cast perform as cast disintegrate;
		#SEND !cast activate combat;
		#SEND !study spellbook;
		#SEND !cast find familiar;
		#SEND !cast deeppockets;
		#SEND !cast light;
		#DELAY {1} {
			#SEND !cast greater contingency as shield#cast magnificent shield;
			#SEND !cast magnificent shield;
			#DELAY {10} {
				#SEND !cast greater contingency as stoneskin#cast stoneskin;
				#SEND !cast stoneskin;
				#DELAY {10} {
					#SEND !cast greater contingency as armor#cast armor;
					#SEND !cast armor;
					#DELAY {10} {
						#SEND !cast greater contingency as major globe#cast major globe;
						#SEND !cast major globe;
						#DELAY {10} {
							#SEND !cast greater contingency as prismatic aura#cast prismatic aura;
							#SEND !cast prismatic aura;
							#DELAY {10} {
								#SEND !cast greater contingency as protection from evil#cast protection from evil;
								#SEND !cast protection from evil;
								#DELAY {10} {
									#SEND !cast greater contingency as blink#cast blink;
									#SEND !cast blink;
								}
							};
						};
					};
				};
			};
		};
	};
};

#class {mage} {close}